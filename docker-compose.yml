version: '3.8'

name: 'inno-v1'
networks:
    internal:
    frontend:
    backend:
services:
    tmp:
        image: busybox
        container_name: busybox
        command: chmod -R 777 /tmp/docker
        networks:
            - internal
        volumes:
            - /tmp/docker/
    mercure:
        container_name: mercure
        image: dunglas/mercure
        restart: unless-stopped
        environment:
            MERCURE_PUBLISHER_JWT_KEY: ${MERCURE_SECRET_KEY}
            MERCURE_SUBSCRIBER_JWT_KEY: ${MERCURE_SECRET_KEY}
            ALLOW_ANONYMOUS: 1
            SERVER_NAME: ":8080"
            CORS_ALLOWED_ORIGINS: ${MERCURE_ALLOW_HOST}
            MERCURE_EXTRA_DIRECTIVES: |-
                cors_origins ${MERCURE_ALLOW_HOST}
                publish_origins ${MERCURE_ALLOW_HOST}
                anonymous
        ports:
            - ${LOCAL_MERCURE_PORT}:8080
        volumes:
            - mercure_data:/data
            - mercure_config:/config
        networks:
            - internal
            - frontend
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:8080/.well-known/mercure" ]
            interval: 30s
            timeout: 10s
            retries: 3
    nginx:
        image: nginx:stable-alpine
        container_name: nginx
        ports:
            - "80:80"
            - "8080:8080"
        restart: unless-stopped
        volumes:
            - ./dev:/var/www
            - ./config/nginx-server/nginx.conf:/etc/nginx/nginx.conf
            - ./config/nginx:/etc/nginx/conf.d
            - ./logs/nginx:/var/log/nginx/
        depends_on:
            - php
        networks:
            - frontend
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost/nginx_status" ]
            interval: 30s
            timeout: 10s
            retries: 3
    redis:
        image: redis:latest
        command: redis-server /etc/redis.conf
        container_name: redis
        restart: unless-stopped
        networks:
            - backend
        volumes:
            - ./config/redis/redis.conf:/etc/redis.conf
            - ./database/redis:/data
        volumes_from:
            - tmp
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            interval: 30s
            timeout: 10s
            retries: 3
    elasticsearch:
        image: elasticsearch:8.8.0
        container_name: elasticsearch
        restart: unless-stopped
        ports:
            - "9200:9200"
        environment:
            - discovery.type=single-node
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
            - xpack.security.enabled=false
        volumes:
            - ./config/elastic/node-single.yml:/usr/share/elasticsearch/config/elasticsearch.yml
            - ./database/elastic:/var/lib/elasticsearch
            - ./logs/elastic/node_0:/usr/share/elasticsearch/logs
        depends_on:
            - php
            - postgres
        networks:
            - backend
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health" ]
            interval: 30s
            timeout: 10s
            retries: 3
    php:
        image: php:latest
        build:
            context: ./config/php
            dockerfile: Dockerfile
        container_name: php
        restart: always
        depends_on:
            - redis
            - postgres
        volumes:
          - ./dev:/var/www
          - ./config/php/php.ini:/usr/local/etc/php/php.ini
          - ./config/supervisor/supervisord.conf:/etc/supervisor/supervisord.conf
          - ./logs/supervisor:/var/log/supervisor
        ports:
          - "9000:9000"
        networks:
          - backend
          - frontend
        command: ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
        volumes_from:
            - tmp
        healthcheck:
            test: [ "CMD", "curl", "-f", "http://localhost:9000" ]
            interval: 30s
            timeout: 10s
            retries: 3
    postgres:
        image: postgres:latest
        container_name: postgres
        command: "postgres -c fsync=off -c full_page_writes=off -c synchronous_commit=OFF"
        restart: always
        build:
            context: ./config/postgres
            dockerfile: Dockerfile
        ports:
            - "5432:5432"
        volumes:
            - pgdata:/var/lib/postgresql/data
        networks:
            - backend
        environment:
            POSTGRES_HOST: localhost
            POSTGRES_HOST_AUTH_METHOD: trust
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_USER: ${POSTGRES_USER}
            PGDATA: ${PGDATA}
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
            interval: 30s
            timeout: 10s
            retries: 3
    mysql:
        image: mysql:8.0.1
        container_name: mysql
        restart: unless-stopped
        #command: ["mysqld", "--mysql-native-password=ON"]
        ports:
            - "3306:3306"
            - "3307:3306"
        networks:
            - internal
        depends_on:
            - php
        volumes:
            - ./config/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
            - ./database/mysql:/var/lib/mysql
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        volumes_from:
            - tmp
volumes:
  pgdata:
  mysql:
  mercure_data:
  mercure_config:
  tmp_data:
  redis_config:
  redis_data:
  elastic_config:
  elastic_data:
  elastic_logs:
